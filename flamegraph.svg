<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA[var details, searchbtn, matchedtxt, svg;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}
// mouse-over for info
function s(node) {		// show
    info = g_to_text(node);
    details.nodeValue = nametype + " " + info;
}
function c() {			// clear
    details.nodeValue = ' ';
}
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
})
// functions
function find_child(parent, name, attr) {
    var children = parent.childNodes;
    for (var i=0; i<children.length;i++) {
        if (children[i].tagName == name)
            return (attr != undefined) ? children[i].attributes[attr].value : children[i];
    }
    return;
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_"+attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_"+attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_"+attr].value;
    e.removeAttribute("_orig_"+attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes["width"].value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;
    // Smaller than this size won't fit anything
    if (w < 2*fontsize*fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x=txt.length-2; x>0; x--) {
        if (t.getSubStringLength(0, x+2) <= w) {
            t.textContent = txt.substring(0,x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i=0, c=e.childNodes; i<c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes["x"] != undefined) {
            orig_save(e, "x");
            e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
        }
        if (e.attributes["width"] != undefined) {
            orig_save(e, "width");
            e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i=0, c=e.childNodes; i<c.length; i++) {
        zoom_child(c[i], x-xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes["x"] != undefined) {
            orig_save(e, "x");
            e.attributes["x"].value = xpad;
        }
        if (e.attributes["width"] != undefined) {
            orig_save(e, "width");
            e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i=0, c=e.childNodes; i<c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr["width"].value);
    var xmin = parseFloat(attr["x"].value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr["y"].value);
    var ratio = (svg.width.baseVal.value - 2*xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    var unzoombtn = document.getElementById("unzoom");
    unzoombtn.style["opacity"] = "1.0";
    var el = document.getElementsByTagName("g");
    for(var i=0;i<el.length;i++){
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a["x"].value);
        var ew = parseFloat(a["width"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a["y"].value) > ymin;
        } else {
            var upstack = parseFloat(a["y"].value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.style["opacity"] = "0.5";
                zoom_parent(e);
                e.onclick = function(e){unzoom(); zoom(this);};
                update_text(e);
            }
            // not in current path
            else
                e.style["display"] = "none";
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.style["display"] = "none";
            }
            else {
                zoom_child(e, xmin, ratio);
                e.onclick = function(e){zoom(this);};
                update_text(e);
            }
        }
    }
}
function unzoom() {
    var unzoombtn = document.getElementById("unzoom");
    unzoombtn.style["opacity"] = "0.0";
    var el = document.getElementsByTagName("g");
    for(i=0;i<el.length;i++) {
        el[i].style["display"] = "block";
        el[i].style["opacity"] = "1";
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.getElementsByTagName("rect");
    for (var i=0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.style["opacity"] = "0.1";
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.style["opacity"] = "0.0";
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementsByTagName("g");
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        if (e.attributes["class"].value != "func_g")
            continue;
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (rect == null) {
            // the rect might be wrapped in an anchor
            // if nameattr href is being used
            if (rect = find_child(e, "a")) {
                rect = find_child(r, "rect");
            }
        }
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes["width"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes["x"].value);
            orig_save(rect, "fill");
            rect.attributes["fill"].value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.style["opacity"] = "1.0";
    searchbtn.firstChild.nodeValue = "Reset Search"
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.style["opacity"] = "1.0";
    pct = 100 * count / maxwidth;
    if (pct == 100)
        pct = "100"
    else
        pct = pct.toFixed(1)
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function searchover(e) {
    searchbtn.style["opacity"] = "1.0";
}
function searchout(e) {
    if (searching) {
        searchbtn.style["opacity"] = "1.0";
    } else {
        searchbtn.style["opacity"] = "0.1";
    }
}
]]></script><rect x="0" y="0" width="1200" height="598" fill="url(#background)"/><text text-anchor="middle" x="600.00" y="24.00" font-size="17" font-family="Verdana" fill="rgb(0, 0, 0)">Flame Graph</text><text id="details" text-anchor="left" x="10.00" y="581.00" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"> </text><text id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" text-anchor="left" x="10.00" y="24.00" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">Reset Zoom</text><text id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" text-anchor="left" x="1090.00" y="24.00" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">Search</text><text id="matched" text-anchor="left" x="1090.00" y="581.00" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"> </text><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>.annobin_rtld.c (6 samples, 0.94%)</title><rect x="10" y="517" width="11" height="15" fill="rgb(247,128,53)"/><text text-anchor="left" x="13.00" y="527.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>_dl_start (1 samples, 0.16%)</title><rect x="19" y="501" width="2" height="15" fill="rgb(224,211,30)"/><text text-anchor="left" x="22.00" y="511.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>_dl_start_final (1 samples, 0.16%)</title><rect x="19" y="485" width="2" height="15" fill="rgb(211,13,23)"/><text text-anchor="left" x="22.00" y="495.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>_dl_sysdep_start (1 samples, 0.16%)</title><rect x="19" y="469" width="2" height="15" fill="rgb(213,49,31)"/><text text-anchor="left" x="22.00" y="479.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__GI___tunables_init (1 samples, 0.16%)</title><rect x="19" y="453" width="2" height="15" fill="rgb(216,122,47)"/><text text-anchor="left" x="22.00" y="463.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::map::make_hash (1 samples, 0.16%)</title><rect x="21" y="117" width="1" height="15" fill="rgb(246,207,34)"/><text text-anchor="left" x="24.00" y="127.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.16%)</title><rect x="21" y="101" width="1" height="15" fill="rgb(240,212,48)"/><text text-anchor="left" x="24.00" y="111.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.16%)</title><rect x="21" y="85" width="1" height="15" fill="rgb(229,135,40)"/><text text-anchor="left" x="24.00" y="95.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.16%)</title><rect x="21" y="69" width="1" height="15" fill="rgb(237,20,12)"/><text text-anchor="left" x="24.00" y="79.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.16%)</title><rect x="21" y="53" width="1" height="15" fill="rgb(242,15,20)"/><text text-anchor="left" x="24.00" y="63.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.16%)</title><rect x="21" y="37" width="1" height="15" fill="rgb(239,47,1)"/><text text-anchor="left" x="24.00" y="47.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::lexical::parse_identifier (2 samples, 0.31%)</title><rect x="21" y="197" width="3" height="15" fill="rgb(221,228,33)"/><text text-anchor="left" x="24.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (2 samples, 0.31%)</title><rect x="21" y="181" width="3" height="15" fill="rgb(233,226,23)"/><text text-anchor="left" x="24.00" y="191.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (2 samples, 0.31%)</title><rect x="21" y="165" width="3" height="15" fill="rgb(249,221,15)"/><text text-anchor="left" x="24.00" y="175.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.31%)</title><rect x="21" y="149" width="3" height="15" fill="rgb(207,179,22)"/><text text-anchor="left" x="24.00" y="159.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (2 samples, 0.31%)</title><rect x="21" y="133" width="3" height="15" fill="rgb(218,209,44)"/><text text-anchor="left" x="24.00" y="143.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 0.16%)</title><rect x="22" y="117" width="2" height="15" fill="rgb(205,104,27)"/><text text-anchor="left" x="25.00" y="127.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.16%)</title><rect x="22" y="101" width="2" height="15" fill="rgb(252,138,53)"/><text text-anchor="left" x="25.00" y="111.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.16%)</title><rect x="22" y="85" width="2" height="15" fill="rgb(214,13,6)"/><text text-anchor="left" x="25.00" y="95.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;oreo::lexical::LexicalIt as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.47%)</title><rect x="21" y="213" width="5" height="15" fill="rgb(224,115,49)"/><text text-anchor="left" x="24.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.16%)</title><rect x="24" y="197" width="2" height="15" fill="rgb(222,144,38)"/><text text-anchor="left" x="27.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.16%)</title><rect x="24" y="181" width="2" height="15" fill="rgb(207,152,33)"/><text text-anchor="left" x="27.00" y="191.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.16%)</title><rect x="24" y="165" width="2" height="15" fill="rgb(246,106,49)"/><text text-anchor="left" x="27.00" y="175.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1 samples, 0.16%)</title><rect x="24" y="149" width="2" height="15" fill="rgb(241,162,11)"/><text text-anchor="left" x="27.00" y="159.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::raw::RawTable&lt;T&gt;::find (1 samples, 0.16%)</title><rect x="24" y="133" width="2" height="15" fill="rgb(208,26,44)"/><text text-anchor="left" x="27.00" y="143.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.16%)</title><rect x="24" y="117" width="2" height="15" fill="rgb(208,192,7)"/><text text-anchor="left" x="27.00" y="127.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;oreo::scanner::LineScannerIt as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.16%)</title><rect x="26" y="197" width="2" height="15" fill="rgb(245,166,13)"/><text text-anchor="left" x="29.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (150 samples, 23.44%)</title><rect x="28" y="117" width="277" height="15" fill="rgb(230,193,50)"/><text text-anchor="left" x="31.00" y="127.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;F as core::str::pattern::MultiCharEq..</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::scanner::parse_block::_$u7b$$u7b$closure$u7d$$u7d$::hd63473a6e358fdcd (150 samples, 23.44%)</title><rect x="28" y="101" width="277" height="15" fill="rgb(213,151,21)"/><text text-anchor="left" x="31.00" y="111.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">oreo::scanner::parse_block::_$u7b$$u7..</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (101 samples, 15.78%)</title><rect x="305" y="117" width="186" height="15" fill="rgb(235,67,38)"/><text text-anchor="left" x="308.00" y="127.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;core::slice::Iter&lt;T&gt; as..</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (570 samples, 89.06%)</title><rect x="28" y="133" width="1051" height="15" fill="rgb(234,58,31)"/><text text-anchor="left" x="31.00" y="143.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::str::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (319 samples, 49.84%)</title><rect x="491" y="117" width="588" height="15" fill="rgb(209,128,5)"/><text text-anchor="left" x="494.00" y="127.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;core::str::CharIndices as core::iter::traits::iterator::Iterator&gt;::next</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (319 samples, 49.84%)</title><rect x="491" y="101" width="588" height="15" fill="rgb(225,6,35)"/><text text-anchor="left" x="494.00" y="111.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::str::next_code_point (319 samples, 49.84%)</title><rect x="491" y="85" width="588" height="15" fill="rgb(212,190,48)"/><text text-anchor="left" x="494.00" y="95.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">core::str::next_code_point</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 20.78%)</title><rect x="834" y="69" width="245" height="15" fill="rgb(208,127,14)"/><text text-anchor="left" x="837.00" y="79.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;core::slice::Iter&lt;T&gt; as core::i..</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::slice::Iter&lt;T&gt;::post_inc_start (8 samples, 1.25%)</title><rect x="1064" y="53" width="15" height="15" fill="rgb(244,223,30)"/><text text-anchor="left" x="1067.00" y="63.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::ptr::&lt;impl *const T&gt;::offset (8 samples, 1.25%)</title><rect x="1064" y="37" width="15" height="15" fill="rgb(242,44,37)"/><text text-anchor="left" x="1067.00" y="47.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (630 samples, 98.44%)</title><rect x="21" y="261" width="1161" height="15" fill="rgb(220,221,13)"/><text text-anchor="left" x="24.00" y="271.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (630 samples, 98.44%)</title><rect x="21" y="245" width="1161" height="15" fill="rgb(241,3,10)"/><text text-anchor="left" x="24.00" y="255.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (630 samples, 98.44%)</title><rect x="21" y="229" width="1161" height="15" fill="rgb(223,107,21)"/><text text-anchor="left" x="24.00" y="239.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;oreo::scanner::LineScannerIt as core::iter::traits::iterator::Iterator&gt;::next (627 samples, 97.97%)</title><rect x="26" y="213" width="1156" height="15" fill="rgb(234,62,21)"/><text text-anchor="left" x="29.00" y="223.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;oreo::scanner::LineScannerIt as core::iter::traits::iterator::Iterator&gt;::next</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::scanner::parse_block (626 samples, 97.81%)</title><rect x="28" y="197" width="1154" height="15" fill="rgb(212,196,20)"/><text text-anchor="left" x="31.00" y="207.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">oreo::scanner::parse_block</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::str::&lt;impl str&gt;::find (626 samples, 97.81%)</title><rect x="28" y="181" width="1154" height="15" fill="rgb(219,52,38)"/><text text-anchor="left" x="31.00" y="191.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">core::str::&lt;impl str&gt;::find</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (626 samples, 97.81%)</title><rect x="28" y="165" width="1154" height="15" fill="rgb(219,206,54)"/><text text-anchor="left" x="31.00" y="175.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::str::pattern::Searcher::next_match (626 samples, 97.81%)</title><rect x="28" y="149" width="1154" height="15" fill="rgb(235,10,38)"/><text text-anchor="left" x="31.00" y="159.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">core::str::pattern::Searcher::next_match</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;oreo::scanner::LineScannerIt as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 8.75%)</title><rect x="1079" y="133" width="103" height="15" fill="rgb(206,115,54)"/><text text-anchor="left" x="1082.00" y="143.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;oreo::scann..</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>_start (631 samples, 98.59%)</title><rect x="21" y="517" width="1163" height="15" fill="rgb(244,87,46)"/><text text-anchor="left" x="24.00" y="527.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">_start</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__libc_start_main (631 samples, 98.59%)</title><rect x="21" y="501" width="1163" height="15" fill="rgb(226,92,48)"/><text text-anchor="left" x="24.00" y="511.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">__libc_start_main</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>main (631 samples, 98.59%)</title><rect x="21" y="485" width="1163" height="15" fill="rgb(254,1,46)"/><text text-anchor="left" x="24.00" y="495.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">main</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::rt::lang_start_internal (631 samples, 98.59%)</title><rect x="21" y="469" width="1163" height="15" fill="rgb(216,149,10)"/><text text-anchor="left" x="24.00" y="479.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">std::rt::lang_start_internal</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::panic::catch_unwind (631 samples, 98.59%)</title><rect x="21" y="453" width="1163" height="15" fill="rgb(236,188,27)"/><text text-anchor="left" x="24.00" y="463.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">std::panic::catch_unwind</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::panicking::try (631 samples, 98.59%)</title><rect x="21" y="437" width="1163" height="15" fill="rgb(240,14,4)"/><text text-anchor="left" x="24.00" y="447.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">std::panicking::try</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__rust_maybe_catch_panic (631 samples, 98.59%)</title><rect x="21" y="421" width="1163" height="15" fill="rgb(213,200,14)"/><text text-anchor="left" x="24.00" y="431.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">__rust_maybe_catch_panic</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::panicking::try::do_call (631 samples, 98.59%)</title><rect x="21" y="405" width="1163" height="15" fill="rgb(213,50,40)"/><text text-anchor="left" x="24.00" y="415.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">std::panicking::try::do_call</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h4e93c1949c7a1955 (631 samples, 98.59%)</title><rect x="21" y="389" width="1163" height="15" fill="rgb(210,31,10)"/><text text-anchor="left" x="24.00" y="399.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h4e93c1949c7a1955</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h0555947d5157fd3e (631 samples, 98.59%)</title><rect x="21" y="373" width="1163" height="15" fill="rgb(254,117,42)"/><text text-anchor="left" x="24.00" y="383.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h0555947d5157fd3e</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>stress::main (631 samples, 98.59%)</title><rect x="21" y="357" width="1163" height="15" fill="rgb(249,65,32)"/><text text-anchor="left" x="24.00" y="367.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">stress::main</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::iter::traits::iterator::Iterator::collect (631 samples, 98.59%)</title><rect x="21" y="341" width="1163" height="15" fill="rgb(242,70,41)"/><text text-anchor="left" x="24.00" y="351.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">core::iter::traits::iterator::Iterator::collect</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (631 samples, 98.59%)</title><rect x="21" y="325" width="1163" height="15" fill="rgb(216,149,20)"/><text text-anchor="left" x="24.00" y="335.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (631 samples, 98.59%)</title><rect x="21" y="309" width="1163" height="15" fill="rgb(247,102,7)"/><text text-anchor="left" x="24.00" y="319.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (631 samples, 98.59%)</title><rect x="21" y="293" width="1163" height="15" fill="rgb(206,189,28)"/><text text-anchor="left" x="24.00" y="303.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (631 samples, 98.59%)</title><rect x="21" y="277" width="1163" height="15" fill="rgb(217,29,21)"/><text text-anchor="left" x="24.00" y="287.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">alloc::vec::Vec&lt;T&gt;::extend_desugared</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::ptr::write (1 samples, 0.16%)</title><rect x="1182" y="261" width="2" height="15" fill="rgb(253,31,20)"/><text text-anchor="left" x="1185.00" y="271.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.16%)</title><rect x="1184" y="501" width="2" height="15" fill="rgb(214,4,4)"/><text text-anchor="left" x="1187.00" y="511.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::ptr::write (1 samples, 0.16%)</title><rect x="1184" y="485" width="2" height="15" fill="rgb(223,15,54)"/><text text-anchor="left" x="1187.00" y="495.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>__memcpy_sse2_unaligned_erms (1 samples, 0.16%)</title><rect x="1184" y="469" width="2" height="15" fill="rgb(232,23,13)"/><text text-anchor="left" x="1187.00" y="479.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::parser::compound (2 samples, 0.31%)</title><rect x="1184" y="517" width="4" height="15" fill="rgb(208,183,49)"/><text text-anchor="left" x="1187.00" y="527.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::parser::statement (1 samples, 0.16%)</title><rect x="1186" y="501" width="2" height="15" fill="rgb(253,229,14)"/><text text-anchor="left" x="1189.00" y="511.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::parser::decl (1 samples, 0.16%)</title><rect x="1186" y="485" width="2" height="15" fill="rgb(231,198,12)"/><text text-anchor="left" x="1189.00" y="495.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::parsing_utils::advance_expecting (1 samples, 0.16%)</title><rect x="1186" y="469" width="2" height="15" fill="rgb(226,207,46)"/><text text-anchor="left" x="1189.00" y="479.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>all (640 samples, 100%)</title><rect x="10" y="549" width="1180" height="15" fill="rgb(234,196,21)"/><text text-anchor="left" x="13.00" y="559.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>stress (640 samples, 100.00%)</title><rect x="10" y="533" width="1180" height="15" fill="rgb(224,37,9)"/><text text-anchor="left" x="13.00" y="543.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)">stress</text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::parser::expr (1 samples, 0.16%)</title><rect x="1188" y="517" width="2" height="15" fill="rgb(232,83,34)"/><text text-anchor="left" x="1191.00" y="527.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::parser::term (1 samples, 0.16%)</title><rect x="1188" y="501" width="2" height="15" fill="rgb(250,117,50)"/><text text-anchor="left" x="1191.00" y="511.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::parser::factor (1 samples, 0.16%)</title><rect x="1188" y="485" width="2" height="15" fill="rgb(231,174,21)"/><text text-anchor="left" x="1191.00" y="495.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::parser::product (1 samples, 0.16%)</title><rect x="1188" y="469" width="2" height="15" fill="rgb(219,73,15)"/><text text-anchor="left" x="1191.00" y="479.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::parser::atom (1 samples, 0.16%)</title><rect x="1188" y="453" width="2" height="15" fill="rgb(251,105,53)"/><text text-anchor="left" x="1191.00" y="463.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>oreo::parser::unit (1 samples, 0.16%)</title><rect x="1188" y="437" width="2" height="15" fill="rgb(253,199,29)"/><text text-anchor="left" x="1191.00" y="447.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;oreo::parsing_utils::CollectorStream&lt;core::iter::adapters::Peekable&lt;T&gt;&gt; as oreo::parsing_utils::TokenStream&gt;::peek (1 samples, 0.16%)</title><rect x="1188" y="421" width="2" height="15" fill="rgb(226,142,41)"/><text text-anchor="left" x="1191.00" y="431.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::iter::adapters::Peekable&lt;I&gt;::peek (1 samples, 0.16%)</title><rect x="1188" y="405" width="2" height="15" fill="rgb(238,95,27)"/><text text-anchor="left" x="1191.00" y="415.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::option::Option&lt;T&gt;::get_or_insert_with (1 samples, 0.16%)</title><rect x="1188" y="389" width="2" height="15" fill="rgb(247,10,12)"/><text text-anchor="left" x="1191.00" y="399.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::iter::adapters::Peekable$LT$I$GT$::peek::_$u7b$$u7b$closure$u7d$$u7d$::h6e64949628f1a43a (1 samples, 0.16%)</title><rect x="1188" y="373" width="2" height="15" fill="rgb(238,66,0)"/><text text-anchor="left" x="1191.00" y="383.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.16%)</title><rect x="1188" y="357" width="2" height="15" fill="rgb(214,101,33)"/><text text-anchor="left" x="1191.00" y="367.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.16%)</title><rect x="1188" y="341" width="2" height="15" fill="rgb(225,124,41)"/><text text-anchor="left" x="1191.00" y="351.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.16%)</title><rect x="1188" y="325" width="2" height="15" fill="rgb(207,208,24)"/><text text-anchor="left" x="1191.00" y="335.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g><g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)"><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.16%)</title><rect x="1188" y="309" width="2" height="15" fill="rgb(248,74,12)"/><text text-anchor="left" x="1191.00" y="319.50" font-size="12" font-family="Verdana" fill="rgb(0, 0, 0)"></text></g></svg>